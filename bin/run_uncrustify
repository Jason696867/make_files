#!/usr/bin/env bash
#
# Medtronic MITG R&D
# 5920 Longbow Drive, Boulder, CO
# Copyright (c) 2016 Medtronic
# All Rights Reserved.
#
# @file  bin/run_uncrustify
#
# Apply Uncrustify style-checks to a given directory or file.
#
# Offers a patch for suggested changes, if any.
#
# References
# - Uncrustify: http://uncrustify.sourceforge.net/
set -e

if [[ $# -ne 1 ]]; then
  echo "Usage: $(basename "$0") SOURCE"
  exit 1
fi

target="$1"
if [[ -d "$target" ]]; then
  files=$(ls "$target"/*.h "$target"/*.cpp)
elif [[ -f "$target" ]]; then
  files="$target"
else
  echo "'$target' not found"
  exit 1
fi


checker="uncrustify"
# Note: the release was tagged 0.61 while the internal version string
# was still 0.60 so uncrustify reports the wrong version number.
version="uncrustify 0.60"

config=".config/uncrustify/uncrustify.cfg"

source_language="CPP"

file_exts=".c .h .cpp .hpp"



# check whether the given file matches any of the set extensions
matches_extension() {
  local filename="$(basename -- "$1")"
  local extension=".${filename##*.}"
  local ext

  for ext in $file_exts; do [ "$ext" = "$extension" ] && return 0; done

  return 1
}


if ! command -v "$checker" > /dev/null ; then
  echo "[ERROR] $checker: command not found"
  exit 1
fi

reported_version=$($checker --version)
if [[ "${reported_version}" != "$version" ]]; then
  echo "[ERROR] $checker: requires version $version -- found ${reported_version}"
  echo "Please uninstall $(which $checker)"
  exit 1
fi

if [[ ! -f "$config" ]]; then
  echo "[ERROR] no config file at $config"
  exit 1
fi


# create a filename to store our generated patch
prefix="run-uncrustify"
suffix=$(date +%Y%m%dT%H%M%S)
patch="/tmp/$prefix-$suffix.patch"

# clean up any older uncrustify patches
rm -f /tmp/$prefix-*.patch

# Enumerate the files to check.
for file in $files; do
  # ignore file if we do check for file extensions and the file
  # does not match any of the extensions specified in $FILE_EXTS
  if ! matches_extension "$file"; then
    continue;
  fi

  # escape special characters in the source filename:
  # - '\': backslash needs to be escaped
  # - '*': used as matching string => '*' would mean expansion
  #        (curiously, '?' must not be escaped)
  # - '[': used as matching string => '[' would mean start of set
  # - '|': used as sed split char instead of '/', so it needs to be escaped
  #        in the filename
  # printf %s particularly important if the filename contains the % character
  file_escaped_source=$(printf "%s" "$file" | sed -e 's/[\*[|]/\\&/g')

  # escape special characters in the target filename:
  # phase 1 (characters escaped in the output diff):
  #     - '\': backslash needs to be escaped in the output diff
  #     - '"': quote needs to be escaped in the output diff if present inside
  #            of the filename, as it used to bracket the entire filename part
  # phase 2 (characters escaped in the match replacement):
  #     - '\': backslash needs to be escaped again for sed itself
  #            (i.e. double escaping after phase 1)
  #     - '&': would expand to matched string
  #     - '|': used as sed split char instead of '/'
  # printf %s particularly important if the filename contains the % character
  file_escaped_target=$(printf "%s" "$file" | sed -e 's/[\"]/\\&/g' -e 's/[\&|]/\\&/g')

  # Uncrustify detects the language automatically if it is not specified
  language_option=""
  if [ "$source_language" != "AUTO" ] ; then
    language_option="-l $source_language"
  fi

  # uncrustify our sourcefile, create a patch with diff and append it to our $patch
  # The sed call is necessary to transform the patch from
  #    --- $file timestamp
  #    +++ - timestamp
  # to both lines working on the same file and having a a/ and b/ prefix.
  # Else it can not be applied with 'git apply'.
  "$checker" -c "$config" -f "$file" $language_option \
  |diff -u -- "$file" - \
  |sed -e "1s|--- $file_escaped_source|--- \"a/$file_escaped_target\"|" -e "2s|+++ -|+++ \"b/$file_escaped_target\"|" \
  >>"$patch"
done


if [[ ! -s "$patch" ]] ; then
  # assert: Target files comply with the uncrustify rules.
  rm -f "$patch"
  exit 0
fi

# A patch file has been created.
cat "$patch"
printf "\n>>> Apply these changes with:\n  git apply $patch\n"

exit 1
